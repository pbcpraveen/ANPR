# -*- coding: utf-8 -*-
"""APNR_22MAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IEd4C50jsN4qTBEtDjhNEQr5WNNAf9QP
"""
from extractROI import extract_ROI as myROI
from PlatePrediction import plate_predict as isPlate
from ImagePreprocessing import preprocess
from keras.models import load_model
import cv2
import numpy as np

classifier = load_model('plate_model.h5')

image1 = cv2.imread('truck2.jpg')

ROI = myROI(image1)

thresh = preprocess(ROI)

contours,hirarchy = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)

plate=contours[0]
#To find number of contours detected
print("Number of Contours found = " + str(len(contours)))
test=ROI.copy()
selected=[]
plate1=None
flag=0
error =0.6
aspect = 4.1667
rmin = aspect - aspect * error
rmax = aspect + aspect * error
minarea = 15 *15*aspect
maxarea = 125 * 125 * aspect

for e,k in enumerate(contours):
    x,y,w,h=cv2.boundingRect(k)
    img=ROI[y:y+h,x:x+w]
    img1 = img.copy()
    #cv2_imshow(img)
    area = h*w
    r=w/h
    if(r<1):
        r=h/w
    img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    canny_img=cv2.Canny(img,20,150)
    ret,thresh_img = cv2.threshold(canny_img, 127, 255, cv2.THRESH_TOZERO)
    c,hi = cv2.findContours(canny_img, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
    if((minarea<area and maxarea>area) and (rmin<r and rmax>r) and len(c)>45 and len(c)<55):
      
      from keras.preprocessing import image
      test_image = img1
      test_image=cv2.resize(test_image,(30,100),interpolation=cv2.INTER_CUBIC)
      test_image = image.img_to_array(test_image)
      test_image = np.expand_dims(test_image, axis = 0)
      result = classifier.predict(test_image)
      if (result[0][0] ==1) :
        x1,y1,w1,h1=cv2.boundingRect(k)    
        plate1=ROI[y1:y1+int(h1),x1:x1+int(w1)]
        print("plate is found")
        flag=1
        
if(flag==0):
    print("plate contour was not found")
cv2.waitKey(0)
cv2.destroyAllWindows()

img = cv2.cvtColor(plate1,cv2.COLOR_BGR2GRAY)
img = cv2.resize(img,(5*len(img[0]),5*len(img)),interpolation = cv2.INTER_CUBIC)

img = cv2.equalizeHist(img)
for i in range(len(img)):
    for j in range(len(img[i])):
        if(img[i][j]>65 or img[i][j]<15):
            img[i][j]=255
        else:
            img[i][j]=0
cannied = cv2.Canny(img,50,150)
contours,hirarchy = cv2.findContours( cannied,cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
i=0
plate=plate1.copy()
plate = cv2.resize(img,(5*len(plate[0]),5*len(plate)),interpolation = cv2.INTER_CUBIC)
backup=plate.copy()

for c in contours:        
    x,y,w,h=cv2.boundingRect(c)
    #cv2.rectangle(backup,(x,y),(x+w,y+h),(60,255,40),1)
    if(w*h>0 and w>30 and h>152):
        file_name="OCRFILE/char"+str(x)+'_'+str(y)+".jpg"
        char_image=img[y:y+h,x:x+w]
        canny_img=cv2.Canny(char_image,30,200)
        c,hi = cv2.findContours(canny_img, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
        if(len(c)>=1 ):
            
            cv2.imwrite(file_name,char_image)
            i+=1
            cv2.rectangle(backup,(x,y),(x+w,y+h),(60,255,40),1)

import os
k = 0
px = 0
for i in os.listdir('OCRFILE'):
    m = cv2.imread('OCRFILE/'+i,0)
    h = len(m)
    w = len(m[0])
    if(w>=100):
        px=0
        n=w//87 +1
        e=87
        for i in range(n):
            file_name="character/char"+str(k)+".jpg"
            w1=px+87
            if(w1>w):
                w1=w
            char_image=m[0:h,px:w1]
            k+=1
            px=w1
            if(len(char_image[0])>50):
                cv2.imwrite(file_name,char_image)
    else:
        file_name="character/char"+str(k)+".jpg"
        k+=1
        cv2.imwrite(file_name,m)
cv2.imshow('pre',thresh)
cv2.waitKey(0)
cv2.destroyAllWindows()